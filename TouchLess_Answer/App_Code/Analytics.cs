using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using TouchLess_Answer;

namespace TouchLess_Answer.App_Code
{
    // <auto-generated />
    //
   
    //
    //    using TouchLess;
    //
    //    var analytics = Analytics.FromJson(jsonString);

    namespace TouchLess
    {
        using System;
        using System.Collections.Generic;

        using System.Globalization;
        using Newtonsoft.Json;
        using Newtonsoft.Json.Converters;

        public partial class Analytics
        {
            [JsonProperty("Date", Required = Required.Always)]
            public string Date { get; set; }

            [JsonProperty("TotalSessions", Required = Required.Always)]
            [JsonConverter(typeof(ParseStringConverter))]
            public long TotalSessions { get; set; }

            [JsonProperty("OngoingSessions", Required = Required.Always)]
            [JsonConverter(typeof(ParseStringConverter))]
            public long OngoingSessions { get; set; }

            [JsonProperty("FinishedSessions", Required = Required.Always)]
            [JsonConverter(typeof(ParseStringConverter))]
            public long FinishedSessions { get; set; }
        }

        public partial class Analytics
        {
            public static Analytics FromJson(string json) => JsonConvert.DeserializeObject<Analytics>(json, TouchLess.Converter.Settings);
        }

        public static class Serializee
        {
            public static string ToJson(this Analytics self) => JsonConvert.SerializeObject(self, Converter.Settings);
        }

        internal static class Converterr
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }

        internal class ParseStringConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                long l;
                if (Int64.TryParse(value, out l))
                {
                    return l;
                }
                throw new Exception("Cannot unmarshal type long");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (long)untypedValue;
                serializer.Serialize(writer, value.ToString());
                return;
            }

            public static readonly ParseStringConverter Singleton = new ParseStringConverter();
        }
    }




}